<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Question</title>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body {
      background-color: #f8f9fa;
    }

    .sidebar {
      background-color: #343a40;
      color: white;
      height: 100vh;
    }

    .sidebar h5 {
      color: #ffc107;
    }

    .sidebar .nav-link {
      color: white;
    }

    .sidebar .nav-link:hover {
      background-color: #495057;
      color: #ffc107;
    }

    .sidebar .nav-link.fw-bold {
      background-color: #ffc107;
      color: #343a40;
    }

    .card {
      border: none;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .form-check-input:checked {
      background-color: #0d6efd;
      border-color: #0d6efd;
    }

    .btn-primary {
      background-color: #0d6efd;
      border-color: #0d6efd;
    }

    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #004085;
    }
  </style>
</head>

<body>

  <div class="container-fluid">
    <div class="row">

      <!-- Sidebar -->
      <nav class="col-md-3 col-lg-2 d-md-block sidebar py-4">
        <div class="position-sticky">
          <h5 class="px-3">Questions</h5>
          <ul class="nav flex-column" id="questionList">
            <!-- Sidebar will be populated dynamically via AJAX -->
          </ul>
        </div>
      </nav>

      <!-- Main Content -->
      <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
        <div class="card">
          <div class="container">
            <div class="d-flex justify-content-between mb-3">
              <h4 id="questionNumber">Question 1</h4>
              <div class="text-danger">Time Left: <span id="timer"></span></div>
            </div>

            <div id="questionArea"></div>

            <div class="d-flex justify-content-between mt-4">
              <button id="prevBtn" class="btn btn-secondary">Previous</button>
              <button id="nextBtn" class="btn btn-primary">Next</button>
            </div>
          </div>

        </div>
      </main>

    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script>
  $(document).ready(function () {
    const examId = "<%= examId %>";
    let qIndex = 0;
    const totalQuestions = parseInt('<%=totalQs%>')

    // Function to load the sidebar dynamically
    function loadSidebar() {
      $.get(`/student/exam/${examId}/sideBar`, function (response) {
        const totalQuestions = response.totalQuestions;

        // Populate the sidebar with question links
        let sidebarHtml = '';
        for (let i = 0; i < totalQuestions; i++) {
          sidebarHtml += `
            <li class="nav-item">
              <a href="#" 
                 class="nav-link ${i === qIndex ? 'fw-bold' : ''}" 
                 data-index="${i}">
                Q${i + 1}
              </a>
            </li>
          `;
        }
        $('#questionList').html(sidebarHtml);

        // Add click event to dynamically load questions
        $('#questionList .nav-link').click(function (e) {
          e.preventDefault();

          // remove 'fw-bold' class form all links
          $('#questionList .nav-link').removeClass('fw-bold');

          // Add 'fw-bold' class to the clicked link
          $(this).addClass('fw-bold');

          // load the corresponding question 
          const index = $(this).data('index');
          qIndex = index;
          loadQuestion(qIndex);
        });
      }).fail(function () {
        alert('Failed to load questions. Please try again.');
      });
    }

    // Function to load a question
    function loadQuestion(index) {
      $.get(`/student/exam/${examId}/question/${index}`, function (response) {
        // Update question number
        $("#questionNumber").text(`Question ${index + 1}`);

        // Populate the question area
        $('#questionArea').html(`
          <p class="fs-5">${response.questionText}</p>
          <form id="questionForm">
            ${response.options.map((option, i) => `
              <div class="form-check mb-2">
                <input class="form-check-input" type="radio" name="answer" id="option${i}" value="${option}" ${
                  getSavedAnswer(response._id) === option ? "checked" : ""
                }>
                <label class="form-check-label fs-5" for="option${i}">${option}</label>
              </div>
            `).join("")}
          </form>
        `);

        // Enable/disable navigation buttons
        $("#prevBtn").prop("disabled", index === 0);
        $("#nextBtn").text(index === totalQuestions - 1 ? "Submit" : "Next");

        // Save the answer when an option is clicked
        $("input[name='answer']").change(function () {
          const selectedAnswer = $("input[name='answer']:checked").val();
          saveAnswer(response._id, selectedAnswer);
        });
      }).fail(function () {
        alert("Failed to load question. Please try again.");
      });
    }

    // Function to save an answer in localStorage
    function saveAnswer(questionId, selectedAnswer) {
      let answers = JSON.parse(localStorage.getItem("examAnswers")) || {};
      answers[questionId] = selectedAnswer; // Save the answer for the specific question
      localStorage.setItem("examAnswers", JSON.stringify(answers));
    }

    // Function to get a saved answer from localStorage
    function getSavedAnswer(questionId) {
      const answers = JSON.parse(localStorage.getItem("examAnswers")) || {};
      return answers[questionId] || ""; // Return the saved answer or an empty string if not found
    }

    // Load the sidebar and the first question on page load
    loadSidebar();
    loadQuestion(qIndex);

    // Handle "Next" button click
    $("#nextBtn").click(function () {
      if (qIndex < totalQuestions - 1) {

        
        qIndex++;
        loadQuestion(qIndex);
         // Update the bold class in the sidebar
    $('#questionList .nav-link').removeClass('fw-bold'); // Remove 'fw-bold' from all links
    $(`#questionList .nav-link[data-index="${qIndex}"]`).addClass('fw-bold'); // Add 'fw-bold' to the current link
      } else {
        // Submit the exam
        const answers = JSON.parse(localStorage.getItem("examAnswers")) || {};
        $.post(`/student/exam/${examId}/submit`, { answers }, function () {
          alert("Exam submitted successfully!");
          localStorage.removeItem("examAnswers"); // Clear answers from localStorage after submission
          window.location.href = `/student/exam/${examId}/result`;
        }).fail(function () {
          alert("Failed to submit exam. Please try again.");
        });
      }
    });

    // Handle "Previous" button click
    $("#prevBtn").click(function () {
      if (qIndex > 0) {
        qIndex--;
        loadQuestion(qIndex);
      }
    });
  });
</script> 
</body>

</html>